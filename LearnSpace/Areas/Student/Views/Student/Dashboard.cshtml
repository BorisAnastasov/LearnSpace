@model StudentDashboardModel

@{
	ViewBag.Title = "Dashboard";
	string success = ((Model.Success != null ? Model.Success.ToString("f2") : "No Records."));
}


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

<div id="dashboardStudent" class="d-flex flex-column">
	<div class="text-center text-capitalize fs-4 text-white color-purple w-auto m-2 rounded-3">
		<h3 class="fw-bold m-1">@Model.FullName</h3>
	</div>
	<div class="container">
		<div class="d-flex flex-row">
			<div asp-controller="Grade" asp-action="Dairy" class="color-blue m-2 w-100 text-white rounded shadow-lg">
				<h1 class="text-center fw-bold" style="margin-top: 5px;">@success</h1>
				<p class="h4 text-center fw-bold">Success</p>
			</div>

			<div class="color-red m-2 w-100 text-white rounded shadow-lg">
				<h1 class="text-center fw-bold">@Model.GradeCount</h1>
				<p class="h4 text-center fw-bold">Grade Count</p>
			</div>
		</div>

		<div class="d-flex flex-row">
			<div class="color-green m-2 w-100 text-white rounded shadow-lg">
				<h1 class="text-center fw-bold">@Model.AssignmentCount</h1>
				<p class="h4 text-center fw-bold">Assignment Count</p>
			</div>

			<div class="color-orange m-2 w-100 text-white rounded shadow-lg">
				<h1 class="text-center fw-bold">@Model.ClassCount</h1>
				<p class="h4 text-center fw-bold">Classes Count</p>
			</div>
		</div>
	</div>


	<div class=" d-flex flex-row justify-content-center align-items-center" style="">
		<canvas id="myLineChart" class="chart-canvas" style="height: 300px; width: 500px"></canvas>
		<canvas id="myBarChart" class="chart-canvas" style="height: 300px; width: 500px"></canvas>
	</div>

</div>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const ctxLine = document.getElementById('myLineChart');
		const recordsLine = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
			Model.LineChartData.Select(x => new { x = x.Month, y = x.AverageGrade }).OrderBy(r => r.x)
			));

		const lineYValues = recordsLine.map(point => point.y);
		const lineXValues = recordsLine.map(point => point.x);

		const dataLine = {
			labels: lineXValues,
			datasets: [{
				label: 'Average Success by Month',
				data: lineYValues,
				fill: true,
				borderColor: 'rgb(75, 192, 192)',
				tension: 0.1
			}]
		};

		new Chart(ctxLine, {
			type: 'line',
			data: dataLine,
			options: {
				responsive: false,
				scales: {
					y: {
						min: 2,
						max: 6,
					}
				}
			}
		});

		const ctxBar = document.getElementById('myBarChart');
		const recordsBar = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
			Model.BarChartData.Select(x => new { x = x.ClassName, y = x.AverageGrade }).OrderBy(r => r.x)
			));

		const barYValues = recordsBar.map(point => point.y);
		const barXValues = recordsBar.map(point => point.x);

		const dataBar = {
			labels: barXValues,
			datasets: [{
				label: 'Average Grade By Class',
				backgroundColor: 'rgba(255, 99, 132, 0.5)',
				borderColor: 'rgba(255, 99, 132, 1)',
				data: barYValues,
				fill: true
			}]
		};

		new Chart(ctxBar, {
			type: 'bar',
			data: dataBar,
			options: {
				responsive: false,
				scales: {
					y: {
						min: 2,
						max: 6
					}
				}
			}
		});
	});
</script>


<style>

	.charMenu {
		width: 100vw;
		height: 40px;
		padding: 10px;
		font-size: 20px;
	}

	.charCard {
		width: 100vw;
		height: calc(100vw - 40px);
		display: flex;
		align-items: center;
		justify-content: start;
	}

	.charBox {
		width: 600px;
		padding: 20px;
		border-radius: 20px;
		border: solid 3px rgba(54, 162, 235, 1);
		background: white;
	}

	.color-blue {
		background-color: #007bff;
		border-radius: 8px;
		padding: 0px;
	}

	.color-red {
		background-color: #a6141b;
		border-radius: 8px;
		padding: 0px;
	}

	.color-green {
		background-color: #28a745;
		border-radius: 8px;
		padding: 0px;
	}
</style>
